/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;


import componente.JOptionCustom;

import dao.produto.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.produto.Produto;
import pay.strategy.PaymentStrategy;
import pay.strategy.Store;
import pay.strategy.formas.CreditCardPaymentStrategy;
import pay.strategy.formas.DebitCardPaymentStrategy;
import pay.strategy.formas.MoneyPaymentStrategy;
import pay.strategy.formas.PIXPaymentStrategy;
import utils.Utils;


/**
 *
 * @author mvictor
 */
public class Tela extends javax.swing.JFrame {
    
    private final Store store;
    private double total;
    DefaultListModel<String> model;
    

    /**
     * Creates new form Tela
     */
    
    
    public Tela(){
        initComponents(); 
        ProdutoDAO myDao = new ProdutoDAO();
        List<Produto>items = myDao.getAll();
        items.forEach((meu_items) -> {
            boxProdutos.addItem(meu_items.getNome());
        }); /*
        while(resultado.next()){
        boxProdutos.addItem(resultado.getString("nome"));
        }*/
        txtdescricao.setEditable(false);
        txtpreco.setEditable(false);
        txtItems.setEditable(false);
        txt_total.setEditable(false);
        store = new Store();
        model = new DefaultListModel<>();
        listaItems.setModel(model);
        total=0;
        txt_total.setText("R$: "+ total);
        
       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnCompra = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnClean = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        boxProdutos = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        txtdescricao = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtpreco = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtItems = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaItems = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        txt_total = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Shopping Drink Now - Seja Bem Vindo.");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Caixa de Venda", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        btnCompra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/buy_64x64.png"))); // NOI18N
        btnCompra.setBorderPainted(false);
        btnCompra.setContentAreaFilled(false);
        btnCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompraActionPerformed(evt);
            }
        });

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/add-to-cart-64x64.png"))); // NOI18N
        btnAdd.setBorderPainted(false);
        btnAdd.setContentAreaFilled(false);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/remove-from-cart-64x64.png"))); // NOI18N
        btnRemove.setBorderPainted(false);
        btnRemove.setContentAreaFilled(false);
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnClean.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/clean-64x64.png"))); // NOI18N
        btnClean.setBorderPainted(false);
        btnClean.setContentAreaFilled(false);
        btnClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanActionPerformed(evt);
            }
        });

        jLabel5.setText("Produtos:");

        boxProdutos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                boxProdutosItemStateChanged(evt);
            }
        });

        jLabel6.setText("Descrição:");

        jLabel7.setText("Preço:");

        jLabel8.setText("Ingredientes:");

        txtItems.setColumns(20);
        txtItems.setRows(5);
        jScrollPane2.setViewportView(txtItems);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtdescricao, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(btnClean, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel7)
                            .addComponent(txtpreco, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(boxProdutos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boxProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtdescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtpreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClean, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jScrollPane1.setViewportView(listaItems);

        jLabel1.setText("Total:");

        txt_total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_totalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean fieldsEmpty(){
        return !txtdescricao.getText().isEmpty() &&
               !txtItems.getText().isEmpty()&&
                !txtpreco.getText().isEmpty();
    }
    
    private void load(){
        List<String>dados = new ArrayList<>();
        dados.forEach((item) -> {
            model.addElement(item);
        });
        listaItems.setModel(model);
        
    }
    
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        String nome = boxProdutos.getSelectedItem().toString();
        try{
            ProdutoDAO dao = new ProdutoDAO();
            Produto produto;
            produto = dao.get(nome);
            txtdescricao.setText(produto.getNome());
            txtpreco.setText("R$" + String.valueOf(produto.getPreco()));
            txtItems.setText(produto.getIgredientes());
            total += produto.getPreco();
            store.addItemToCart(produto);
            this.model.addElement(produto.getNome() + " - R$: " + produto.getPreco());
            txt_total.setText("R$" + total);
            this.listaItems.setModel(model);
        }
        catch(NumberFormatException ex){
            System.out.println("Houve um error: [Opção de Selecao]"  + ex.getMessage());
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void boxProdutosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_boxProdutosItemStateChanged
        // TODO add your handling code here:
        String nome = boxProdutos.getSelectedItem().toString();
        try{
            ProdutoDAO dao = new ProdutoDAO();
            Produto produto;
            produto = dao.get(nome);
            txtdescricao.setText(produto.getNome());
            txtpreco.setText("R$: " + String.valueOf(produto.getPreco()));
            txtItems.setText(produto.getIgredientes()); 
        }
        catch(Exception ex){
            System.out.println("Houve um error: [Opção de Selecao]" + ex.getMessage());
        }
    }//GEN-LAST:event_boxProdutosItemStateChanged

    private void btnCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompraActionPerformed
        // TODO add your handling code here:
        String numeroCartao=null;
        String dataValidade=null;
        String cvv=null;
        String alerta_campo = null;
        int senha=0;
        int num=0;
        String descricao = "Compra pix";
        String qrcode = null;
        
        
        if(!model.isEmpty() && !store.isEmpty()){
            Object[] pagamento_forma = {
                "Cartão de Crédito", 
                "Cartão de Débito",
                "Dinheiro",
                "PIX"
            };
            
            String pagamentoSelecionado = null;
            pagamentoSelecionado = (String) JOptionPane.showInputDialog(
                null,
                "Selecione um forma de Pagamento",
                "Opção de Pagamento",
                JOptionPane.INFORMATION_MESSAGE,
                null,
                pagamento_forma,pagamento_forma[0]
            );

            switch(pagamentoSelecionado){
                case "Cartão de Crédito":
                    {
                        Object[] options = {"Confirmar", "Cancelar"};
                        int escolha = JOptionPane.showOptionDialog(
                            rootPane, 
                            "Você realmente desejar confirmar a Compra?",
                            "Aviso",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                            null,options,options[0]
                        );
                        
                        System.out.println(" " + escolha);
                        
                        if(escolha == 0){
                            alerta_campo = "Digite o número do CC";
                            while(true){
                                numeroCartao = JOptionCustom.showPopup(
                                    this, 
                                    "Digite as Informações", 
                                    alerta_campo, 
                                    "#### #### #### ####"
                                );
                                //numeroCartao = MaskedInputDialog.showMaskedInputDialog(null, "Digite as Informações","Digite o numero do Cartão de Crédito:", "#### #### #### ####");
                                if(numeroCartao == null){
                                    alerta_campo = "Campo vázio!";
                                    continue;
                                }
                                else{
                                    break;
                                }
                            }
                            
                            alerta_campo = "Digite a Data de Validade";
                            while(true){
                                dataValidade = JOptionCustom.showPopup(
                                    this, 
                                    "Digite as Informações",
                                    alerta_campo, 
                                    "##/##"
                                );
                                
                                if(dataValidade == null){
                                    alerta_campo = "Campo Vázio!";
                                    continue;
                                }
                                else{
                                    break;
                                }
                            }
                            alerta_campo = "Digite o código de Segurança";
                            while(true){
                                cvv = JOptionCustom.showPopup(
                                    this, 
                                    "Digite as Informações",
                                    alerta_campo, 
                                    "###"
                                );
                                if(cvv == null){
                                    alerta_campo = "Campo Vázio!";
                                    continue;
                                }
                                else{
                                    break;
                                }
                            }
                            alerta_campo = "Digite o números de Parcelas";
                            while(true){
                                num = JOptionCustom.InputDialog(
                                    this, 
                                    "Digite as Informações",
                                    alerta_campo
                                );
                                
                                if(num == 0 && num <= 0){
                                    alerta_campo = "No mínimo 1 parcela";
                                    continue;
                                }
                                else{
                                    break;
                                }
                            }
                            
                            alerta_campo = "Digite a sua senha:";
                            while(true){
                                senha = JOptionCustom.showPopupPassword(
                                    this, 
                                    "Digite as Informações Fornecidas.", 
                                    alerta_campo
                                );
                                if(senha == 0 && senha <= 0){
                                    alerta_campo = "Campo Senha vázio!";
                                    continue;
                                }
                                else{
                                    if(senha == 1234){
                                        break;
                                    }
                                    else{
                                        alerta_campo = "Senha Inválida!";
                                        continue;
                                    }
                                }
                            }
                            
                            PaymentStrategy paymentStrategy = new CreditCardPaymentStrategy(numeroCartao, dataValidade,cvv, num, senha);
                            store.checkout(this, paymentStrategy);
                            limpar();
                        }
                        else{
                            JOptionPane.showMessageDialog(
                                rootPane, 
                                "Forma de Pagamento Cancelado!",
                                "Informe",
                                JOptionPane.PLAIN_MESSAGE
                            );
                        }
                    }
                    break;
                case "Cartão de Débito":
                    {
                        Object[] options = {"Confirmar", "Cancelar"};
                        int escolha = JOptionPane.showOptionDialog(
                            rootPane, 
                            "Você realmente desejar confirmar a Compra?",
                            "Aviso",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                            null,options,options[0]
                        );
                        
                        if(escolha == 0){
                            alerta_campo = "Digite a sua senha:";
                            while(true){
                                senha = JOptionCustom.showPopupPassword(
                                    this, 
                                    "Digite as Informações Fornecidas.", 
                                    alerta_campo
                                );
                                if(senha == 0 && senha <= 0){
                                    alerta_campo = "Campo Senha vázio!";
                                    continue;
                                }
                                else{
                                    if(senha == 1234){
                                        break;
                                    }
                                    else{
                                        alerta_campo = "Senha Inválida!";
                                        continue;
                                    }
                                }
                            }
                            PaymentStrategy paymentStrategy = new DebitCardPaymentStrategy(senha);
                            store.checkout(this, paymentStrategy);
                            limpar();
                        }
                        else{
                            JOptionPane.showMessageDialog(rootPane, "Forma de Pagamento Cancelada!");
                        }
                    }
                    break;
                case "Dinheiro":
                    {
                        Object[] options = {"Confirmar", "Cancelar"};
                        int escolha = JOptionPane.showOptionDialog(
                            rootPane, 
                            "Você realmente desejar confirmar a Compra?",
                            "Aviso",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                            null,options,options[0]
                        );
                        
                        if(escolha == 0){
                            int opcao = JOptionPane.showConfirmDialog(
                                rootPane, 
                                "CPF na Nota?",
                                "Aviso Importante",
                                JOptionPane.YES_NO_OPTION
                            );
                            String cpf = null;
                            if(opcao == 0){
                                while(true){
                                    cpf = JOptionCustom.showPopup(this, "Preencha o campo", "Digite o número do CPF", "###.###.###-##");
                                    if(cpf == null){
                                        continue;
                                    }
                                    else{
                                        break;
                                    }
                                }
                            }
                            else{
                                cpf = "?";
                            }
                            PaymentStrategy paymentStrategy = new MoneyPaymentStrategy(cpf);
                            store.checkout(this, paymentStrategy);
                            limpar();
                        }
                        else{
                            JOptionPane.showMessageDialog(rootPane, "Forma de Pagamento Cancelada!");
                        }
                    }
                    break;
                case "PIX":
                    {
                        Object[] options = {"Confirmar", "Cancelar"};
                        int escolha = JOptionPane.showOptionDialog(
                            rootPane, 
                            "Você realmente desejar confirmar a Compra?",
                            "Aviso",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                            null,options,options[0]
                        );
                        
                        if(escolha == 0){
                            
                           
                            
                            descricao = JOptionCustom.showPopup(this, "Descrição da Compra", "Digite a descrição do produto.");
                            
                            while(true){
                                qrcode = JOptionCustom.showPopup(this, "Código Pix", "Digite o Código PIX:", "+##(##)#####-####");
                                if(qrcode == null){
                                    continue;
                                }
                                else{
                                    break;
                                }
                            }
                            
                            PaymentStrategy paymentStrategy = new PIXPaymentStrategy(qrcode, descricao);
                            store.checkout(this, paymentStrategy);
                            limpar();
                        }
                        else{
                            JOptionPane.showMessageDialog(rootPane, "Forma de Pagamento Cancelada!");
                        }
                    }
                    break;  
            }     
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "Carinho de Compra vázio!");
        }    
    }//GEN-LAST:event_btnCompraActionPerformed

    private void btnCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
        // TODO add your handling code here:
        limpar();
    }//GEN-LAST:event_btnCleanActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        if(!model.isEmpty()){
            int index = listaItems.getSelectedIndex();
            if(index != -1){
                int posicao = listaItems.getSelectedIndex();
                System.out.println("Posicao: " + posicao );
                String nome = listaItems.getSelectedValue();
                model.remove(posicao);
                Utils utils = Utils.getIstance();
                String preco_texto = utils.extrairValorNumerico(nome);
                System.out.println("Total: " + total);
                total -= Double.parseDouble(preco_texto);
                txt_total.setText("R$" + total);
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "Selecione o Item primeiramente!\n");
            }
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "Carinho de Compra vázio!");
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void txt_totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_totalActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txt_totalActionPerformed
    
 
    
    private void limpar(){
        txtdescricao.setText(null);
        txtpreco.setText(null);
        txtItems.setText(null);
        model.removeAllElements();
        store.cleanCart();
        total = 0;
        txt_total.setText("R$: "+total);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxProdutos;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClean;
    private javax.swing.JButton btnCompra;
    private javax.swing.JButton btnRemove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listaItems;
    private javax.swing.JTextArea txtItems;
    private javax.swing.JTextField txt_total;
    private javax.swing.JTextField txtdescricao;
    private javax.swing.JTextField txtpreco;
    // End of variables declaration//GEN-END:variables
}
